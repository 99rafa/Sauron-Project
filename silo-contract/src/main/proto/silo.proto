//
// Protocol buffers definition for Silo server
//
syntax = "proto3";
package pt.tecnico.sauron.silo.grpc;


option java_multiple_files = true;

//observation object message
message ObservationMessage {
    string type = 1;
    string id = 2;
    string datetime = 3;
    string camName = 4;
    CamInfoResponse cords = 5;
}

//cam_join silo operation

message CamJoinRequest {
    string camName = 1;
    double latitude = 2;
    double longitude = 3;

}

message EmptyRequest {

}

message UpdateResponse {

}

//Client Request operation
message ClientRequest {
    string opId = 1;
    map<int32, int32> prevTS = 2;
    CamJoinRequest camJoinRequest = 3;
    CamInfoRequest camInfoRequest = 4;
    ReportRequest reportRequest = 5;
    TrackRequest trackRequest = 6;
    PingRequest pingRequest = 7;
    EmptyRequest emptyRequest = 8;
}

message ClientResponse {
    map<int32, int32> responseTS = 1;
    UpdateResponse updateResponse = 2;
    CamInfoResponse camInfoResponse = 3;
    TrackResponse trackResponse = 4;
    TraceResponse traceResponse = 5;
    PingResponse pingResponse = 6;

}

//cam_info silo operation

message CamInfoRequest {
    string camName = 1;
}

message CamInfoResponse {
    double latitude = 1;
    double longitude = 2;
}

//report silo operation

message ReportRequest {
    string camName = 1;
    repeated ObservationMessage observation = 2;
}

//track silo operation

message TrackRequest {
    string type = 1;
    string id = 2;
}

message TrackResponse {
    ObservationMessage observation = 1;
}

message TraceResponse {
    repeated ObservationMessage observation = 1;
}

message PingRequest {
    string inputCommand = 1;
}

message PingResponse {
    string outputText = 1;
}

enum ServerStatus {
    RUNNING = 0;
    DOWN = 1;
}

message GossipRequest {
    repeated LogRecordsRequest log = 1;
    map<int32, int32> repTs = 2;
}

message LogRecordsRequest {
    int32 repN = 1;
    map<int32, int32> timestamp = 2;
    map<int32, int32> prevTS = 3;
    string id = 4;
    OperationRequest operation = 5;
}

message OperationRequest {
    string op = 1;
    ClientRequest request = 2;
}

service SiloOperationsService {
    // Define a RPC operation
    rpc camJoin (ClientRequest) returns (ClientResponse);
    rpc camInfo (ClientRequest) returns (ClientResponse);
    rpc report (ClientRequest) returns (ClientResponse);
    rpc track (ClientRequest) returns (ClientResponse);
    rpc trackMatch (ClientRequest) returns (ClientResponse);
    rpc trace (ClientRequest) returns (ClientResponse);
    rpc ctrlPing (ClientRequest) returns (ClientResponse);
    rpc ctrlClear (ClientRequest) returns (ClientResponse);
    rpc ctrlInit (ClientRequest) returns (ClientResponse);
    rpc gossip (GossipRequest) returns (UpdateResponse);

}
