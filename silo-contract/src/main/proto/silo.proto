//
// Protocol buffers definition for Silo server
//
syntax = "proto3";
package pt.tecnico.sauron.silo.grpc;


option java_multiple_files = true;

//observation object message
message ObservationMessage{
    string type = 1;
    string id = 2;
    string datetime = 3;
    string camName = 4;
}

//cam_join silo operation

message CamJoinRequest {
    string camName = 1;
    double latitude = 2;
    double longitude = 3;

}

message CamJoinResponse {

}

//Client Request operation
message ClientRequest {
    string opId = 1;
    map<int32,int32> prevTS = 2;
    CamJoinRequest camJoinRequest = 3;
    CamInfoRequest camInfoRequest = 4;
    ReportRequest reportRequest = 5;
    TrackRequest trackRequest = 6;
    TrackMatchRequest trackMatchRequest = 7;
    TraceRequest traceRequest = 8;
    PingRequest pingRequest = 9;
    InitRequest initRequest = 10;
    ClearRequest clearRequest = 11;
}

message ClientResponse {
    map<int32,int32> updateTS = 1;
    CamJoinResponse camJoinResponse = 2;
    CamInfoResponse camInfoResponse = 3;
    ReportResponse reportResponse = 4;
    TrackResponse trackRequest = 5;
    TrackMatchResponse trackMatchResponse = 6;
    TraceResponse traceResponse = 7;
    PingResponse pingResponse = 8;
    InitResponse initResponse = 9;
    ClearResponse clearResponse = 10;

}


//cam_info silo operation

message CamInfoRequest {
    string camName = 1;
}

message CamInfoResponse {
   double latitude = 1;
   double longitude = 2;
}

//report silo operation

message ReportRequest {
    string camName = 1;
    repeated ObservationMessage observation = 2;
}

message ReportResponse {

}

//track silo operation

message TrackRequest {
   string type = 1;
   string id = 2;
}

message TrackResponse {
    ObservationMessage observation = 1;
}

//trackMatch silo operation

message TrackMatchRequest {
    string type = 1;
    string subId = 2;
}

message TrackMatchResponse {
    repeated ObservationMessage observation = 1;
}

//trace silo operation

message TraceRequest {
    string type = 1;
    string id = 2;
}

message TraceResponse {
    repeated ObservationMessage observation = 1;
}

message PingRequest {
    string inputCommand = 1;
}

message PingResponse {
    string outputText = 1;
}

message ClearRequest {

}

message ClearResponse {

}

message InitRequest {

}

message InitResponse {

}

enum ServerStatus {
    RUNNING = 0;
    DOWN = 1;
}



service SiloOperationsService {
    // Define a RPC operation
    rpc camJoin(ClientRequest) returns (ClientResponse);
    rpc camInfo(ClientRequest) returns (ClientResponse);
    rpc report(ClientRequest) returns (ClientResponse);
    rpc track(ClientRequest) returns (ClientResponse);
    rpc trackMatch(ClientRequest) returns (ClientResponse);
    rpc trace(ClientRequest) returns (ClientResponse);
    rpc ctrlPing(ClientRequest) returns (ClientResponse);
    rpc ctrlClear(ClientRequest) returns (ClientResponse);
    rpc ctrlInit(ClientRequest) returns (ClientResponse);
}
